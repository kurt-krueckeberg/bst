// Prospective post-order iterator
template<class Key, class Value>
template<tyypename Visitor>
void bstree<Key, Value>::__postOrderIterative(Visitor visit, std::unique_ptr<Node>& ptr)
{
  Node *pnode = ptr.get();

  stack<Node *> stack; 

 Node *lastNodeVisited{nullptr};

  while (!stack.empty() || pnode) {

    if (pnode) {

      stack.push(pnode)
      pnode = pnode.left.get();

    } else {

      Node *peekNode = stack.top();

      // if right child exists and traversing pnode
      // from left child, then move right

      if (peekNode->right && lastNodeVisited != peekNode.right.get())

          pnode = peekNode->right.get();

      else {

        visit(peekNode);

        lastNodeVisited = stack.top();
        stack.pop();
 
        pnode = nullptr;
     }
   } 
 }
}
